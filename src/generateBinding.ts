import {join} from "node:path";
import { getConfigFromPkgJson, type Json } from "./config.ts";
import { getSymbolsFromZigFiles } from "./getSymbols.ts";

export async function generateBinding(): Promise<void> {
  const bunCwd = process.cwd();
  const rootPkgJsonPath = join(bunCwd, "package.json");
  const pkgJson = await Bun.file(rootPkgJsonPath).json() as Json;
  const config = await getConfigFromPkgJson(pkgJson);

  const zigExportFiles: string[] = [];
  if (config.zigExportFiles == null) {
    throw new Error("No zigExportFiles specified in bun-ffi-z config");
  }

  for (const globStr of config.zigExportFiles) {
    const glob = new Bun.Glob(globStr);
    for (const file of glob.scanSync(config.zigCwd)) {
      const fullPath = join(config.zigCwd, file);
      zigExportFiles.push(fullPath);
    }
  }

  const symbols = await getSymbolsFromZigFiles(zigExportFiles);

  const output = `
// This file is auto-generated by @chainsafe/bun-ffi-z. Do not edit.

import path from "node:path";
import { openLibrary } from "@chainsafe/bun-ffi-z";

const fns = ${JSON.stringify(symbols, null, 2)};
const lib = await openLibrary(path.join(import.meta.dirname, ".."), fns);

export const symbols = lib.symbols;
export const close = lib.close;

`;

  const outputPath = join(bunCwd, "src", "binding.ts");
  await Bun.write(outputPath, output);

  console.log(`Binding generated at ${outputPath}`);
}

